{"name":"CakePHP State Machine Behavior","tagline":"StateMachineBehavior for CakePHP.","body":"CakePHP State Machine\r\n=====================\r\n[![Build Status](https://travis-ci.org/davidsteinsland/cakephp-state-machine.png?branch=master)](https://travis-ci.org/davidsteinsland/cakephp-state-machine) [![Coverage Status](https://coveralls.io/repos/davidsteinsland/cakephp-state-machine/badge.png?branch=master)](https://coveralls.io/r/davidsteinsland/cakephp-state-machine?branch=master) [![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/davidsteinsland/cakephp-state-machine/badges/quality-score.png?s=7d6d7a43f47401c3a4fda69d799c9d671a8659e3)](https://scrutinizer-ci.com/g/davidsteinsland/cakephp-state-machine/) [![Latest Stable Version](https://poser.pugx.org/davidsteinsland/cakephp-state-machine/v/stable.png)](https://packagist.org/packages/davidsteinsland/cakephp-state-machine) [![Total Downloads](https://poser.pugx.org/davidsteinsland/cakephp-state-machine/downloads.png)](https://packagist.org/packages/davidsteinsland/cakephp-state-machine)\r\n\r\nDocumentation is not finished yet either. See the tests if you want to learn something.\r\n\r\n## What is a State Machine?\r\nhttp://en.wikipedia.org/wiki/State_machine\r\n\r\n## Installation\r\nFirst you need to alter the tables of the models you want to use StateMachine:\r\n```sql\r\nALTER TABLE `vehicle` ADD `state` VARCHAR(50);\r\nALTER TABLE `vehicle` ADD `previous_state` VARCHAR(50);\r\n```\r\n\r\n## Features\r\n- Callbacks on states and transitions\r\n- Custom methods may be added to your model\r\n- `is($state)`, `can($transition)`, `on($transition, 'before|after', callback)` and `when($state, callback)` methods allows you to control the whole flow. `transition($transition)` is used to move between two states.\r\n- Roles and rules\r\n- Graphviz\r\n\r\n## Naming conventions\r\n- Transitions and states in `$transitions` should be **lowercased** and **underscored**. The method names are in turn camelized.\r\n  \r\n  Example:\r\n  `shift_up` => `canShiftUp()` => `shiftUp()`\r\n  `first_gear` => `isFirstGear()`\r\n\r\n## How to Use\r\n```php\r\nApp::uses('StateMachineBehavior', 'StateMachine.Model/Behavior');\r\n\r\nclass VehicleModel extends AppModel {\r\n\r\n\tpublic $useTable = 'Vehicle';\r\n\r\n\tpublic $actsAs = array('StateMachine.StateMachine');\r\n\r\n\tpublic $initialState = 'parked';\r\n\r\n\tpublic $transitionRules = array(\r\n        'ignite' => array(\r\n \t\t\t'role' => array('driver'),\r\n\t\t\t'depends' => 'has_key'\r\n\t\t)\r\n\t);\r\n\r\n\tpublic $transitions = array(\r\n\t\t'ignite' => array(\r\n\t\t\t'parked' => 'idling',\r\n\t\t\t'stalled' => 'stalled'\r\n\t\t),\r\n\t\t'park' => array(\r\n\t\t\t'idling' => 'parked',\r\n\t\t\t'first_gear' => 'parked'\r\n\t\t),\r\n\t\t'shift_up' => array(\r\n\t\t\t'idling' => 'first_gear',\r\n\t\t\t'first_gear' => 'second_gear',\r\n\t\t\t'second_gear' => 'third_gear'\r\n\t\t),\r\n\t\t'shift_down' => array(\r\n\t\t\t'first_gear' => 'idling',\r\n\t\t\t'second_gear' => 'first_gear',\r\n\t\t\t'third_gear' => 'second_gear'\r\n\t\t),\r\n\t\t'crash' => array(\r\n\t\t\t'first_gear' => 'stalled',\r\n\t\t\t'second_gear' => 'stalled',\r\n\t\t\t'third_gear' => 'stalled'\r\n\t\t),\r\n\t\t'repair' => array(\r\n\t\t\t'stalled' => 'parked'\r\n\t\t),\r\n\t\t'idle' => array(\r\n\t\t\t'first_gear' => 'idling'\r\n\t\t),\r\n\t\t'turn_off' => array(\r\n\t\t\t'all' => 'parked'\r\n\t\t)\r\n\t);\r\n\r\n    public function __construct($id = false, $ds = false, $table = false) {\r\n        parent::__construct($id, $ds, $table);\r\n        $this->on('ignite', 'after', function() {\r\n            // the car just ignited!\r\n        });\r\n    }\r\n\r\n    public function isMoving() {\r\n        return in_array($this->getCurrentState(), array('first_gear', 'second_gear', 'third_gear'));\r\n    }\r\n\r\n\tpublic function hasKey($role) {\r\n\t\treturn $role == 'driver';\r\n\t}\r\n\r\n}\r\n```\r\n\r\n```php\r\nclass Controller .... {\r\n    public function method() {\r\n        $this->Vehicle->create();\r\n        $this->Vehicle->save(array(\r\n            'Vehicle' => array(\r\n                'title' => 'Toybota'\r\n            )\r\n        ));\r\n        // $this->Vehicle->getCurrentState() == 'parked'\r\n\t\tif ($this->Vehicle->canIgnite('driver')) {\r\n       \t \t$this->Vehicle->ignite('driver');\r\n       \t\t$this->Vehicle->shiftUp();\r\n        \t// $this->Vehicle->getCurrentState() == 'first_gear'\r\n\t\t}\r\n    }\r\n}\r\n```\r\n\r\n## Graphviz\r\nHere's how to state machine of the Vehicle would look like if you saved:\r\n```php\r\n$model->toDot()\r\n```\r\ninto `fsm.gv` and ran:\r\n```sh\r\ndot -Tpng -ofsm.png fsm.gv\r\n```\r\n![](fsm.png)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}